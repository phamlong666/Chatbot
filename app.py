import streamlit as st
import gspread
from google.oauth2.service_account import Credentials
from openai import OpenAI

# K·∫øt n·ªëi Google Sheets
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]

if "google_service_account" in st.secrets:
    info = st.secrets["google_service_account"]
    creds = Credentials.from_service_account_info(info, scopes=SCOPES)
    client = gspread.authorize(creds)
else:
    st.error("‚ùå Kh√¥ng t√¨m th·∫•y google_service_account trong secrets.")

# L·∫•y API key OpenAI t·ª´ secrets
openai_api_key_direct = st.secrets.get("openai_api_key", "")

if openai_api_key_direct:
    try:
        client_ai = OpenAI(api_key=openai_api_key_direct)
        st.success("‚úÖ ƒê√£ k·∫øt n·ªëi OpenAI API key.")
    except Exception as e:
        client_ai = None
        st.error(f"‚ùå L·ªói khi kh·ªüi t·∫°o OpenAI: {e}")
else:
    client_ai = None
    st.warning("‚ö†Ô∏è Ch∆∞a c·∫•u h√¨nh API key OpenAI. Vui l√≤ng th√™m v√†o st.secrets.")

# H√†m ch·ªçn sheet ƒë·ªông
def get_sheet_name(msg):
    msg_lower = msg.lower()
    if "t·ªïn th·∫•t" in msg_lower:
        return "TonThat"
    elif "s·ª± c·ªë" in msg_lower:
        return "SuCo"
    elif "c√¥ng ƒëo√†n" in msg_lower:
        return "CongDoan"
    elif "atvsv" in msg_lower:
        return "ATVSV"
    elif "kinh doanh" in msg_lower:
        return "KinhDoanh"
    else:
        return "CBCNV"

st.title("ü§ñ Tr·ª£ l√Ω ƒêi·ªán l·ª±c ƒê·ªãnh H√≥a")

user_msg = st.text_input("B·∫°n mu·ªën h·ªèi g√¨?")

if st.button("G·ª≠i") and user_msg:
    sheet_name = get_sheet_name(user_msg)

    try:
        sheet = client.open_by_url("https://docs.google.com/spreadsheets/d/13MqQzvV3Mf9bLOAXwICXclYVQ-8WnvBDPAR8VJfOGJg/edit").worksheet(sheet_name)
        records = sheet.get_all_records()

        reply_list = []
        bo_phan = None

        for keyword in ["t·ªï ", "ph√≤ng ", "ƒë·ªôi "]:
            if keyword in user_msg.lower():
                bo_phan = user_msg.lower().split(keyword, 1)[1].strip()
                break

        for r in records:
            if bo_phan and bo_phan not in r.get('B·ªô ph·∫≠n c√¥ng t√°c', '').lower():
                continue
            reply_list.append(
                f"{r.get('H·ªç v√† t√™n', '')} - {r.get('Ng√†y sinh CBCNV', '')} - {r.get('Tr√¨nh ƒë·ªô chuy√™n m√¥n', '')} - "
                f"{r.get('Th√°ng nƒÉm v√†o ng√†nh', '')} - {r.get('B·ªô ph·∫≠n c√¥ng t√°c', '')} - {r.get('Ch·ª©c danh', '')}"
            )

        if reply_list:
            reply_text = "\n".join(reply_list)
            st.text_area("K·∫øt qu·∫£", value=reply_text, height=300)
        else:
            st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ph√π h·ª£p. Ki·ªÉm tra t√™n b·ªô ph·∫≠n ho·∫∑c t·ª´ kh√≥a.")

    except Exception as e:
        st.error(f"‚ùå L·ªói khi truy c·∫≠p sheet '{sheet_name}': {e}")

    if client_ai and (not reply_list):
        try:
            response = client_ai.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "B·∫°n l√† tr·ª£ l√Ω EVN h·ªó tr·ª£ tr·∫£ l·ªùi c√°c c√¢u h·ªèi k·ªπ thu·∫≠t, nghi·ªáp v·ª•, ƒëo√†n th·ªÉ v√† c·ªông ƒë·ªìng."},
                    {"role": "user", "content": user_msg}
                ]
            )
            st.write(response.choices[0].message.content)
        except Exception as e:
            st.error(f"‚ùå L·ªói khi g·ªçi OpenAI: {e}")
    elif not client_ai:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ API key OpenAI. Vui l√≤ng th√™m v√†o st.secrets ƒë·ªÉ s·ª≠ d·ª•ng chatbot.")
