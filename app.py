# -*- coding: utf-8 -*-
import streamlit as st
import gspread
from google.oauth2.service_account import Credentials
from openai import OpenAI
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import re
import os
from pathlib import Path
import fuzzywuzzy.fuzz as fuzz
import datetime
import easyocr
import json
import speech_recognition as sr
import tempfile
import numpy as np
from cryptography.fernet import Fernet
from audio_recorder_streamlit import audio_recorder
from difflib import get_close_matches
# Th√™m import m·ªõi cho bi·ªÉu ƒë·ªì
import seaborn as sns
from oauth2client.service_account import ServiceAccountCredentials


# C·∫•u h√¨nh Streamlit page ƒë·ªÉ s·ª≠ d·ª•ng layout r·ªông
st.set_page_config(layout="wide")

# C·∫•u h√¨nh Matplotlib ƒë·ªÉ hi·ªÉn th·ªã ti·∫øng Vi·ªát
plt.rcParams['font.family'] = 'DejaVu Sans'
plt.rcParams['font.size'] = 14
plt.rcParams['axes.labelsize'] = 14
plt.rcParams['axes.titlesize'] = 14
plt.rcParams['xtick.labelsize'] = 14
plt.rcParams['ytick.labelsize'] = 14
plt.rcParams['figure.titlesize'] = 16

# K·∫øt n·ªëi Google Sheets v·ªõi private key ƒë√£ ƒë∆∞·ª£c m√£ h√≥a
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]

if "gdrive_service_account" in st.secrets:
    try:
        encryption_key_for_decryption = st.secrets["gdrive_service_account"].get("encryption_key_for_decryption")
        encrypted_gdrive_key = st.secrets["gdrive_service_account"].get("gdrive_key")
        
        if encryption_key_for_decryption and encrypted_gdrive_key:
            cipher_suite = Fernet(encryption_key_for_decryption.encode())
            decrypted_key = cipher_suite.decrypt(encrypted_gdrive_key.encode()).decode()
            
            creds_json = json.loads(decrypted_key)
            creds = Credentials.from_service_account_info(creds_json, scopes=SCOPES)
            gc = gspread.authorize(creds)
            
            st.session_state.gc = gc
    except Exception as e:
        st.error(f"‚ùå L·ªói: Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Google Sheets. Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u h√¨nh. Chi ti·∫øt l·ªói: {e}")

# K·∫øt n·ªëi OpenAI
if "openai_api_key" in st.secrets:
    try:
        st.session_state.client = OpenAI(api_key=st.secrets["openai_api_key"])
    except Exception as e:
        st.error(f"‚ùå L·ªói: Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn OpenAI. Vui l√≤ng ki·ªÉm tra l·∫°i API Key. Chi ti·∫øt l·ªói: {e}")

# ID c·ªßa Google Sheet
SHEET_ID = "15i27J_g1x1oXfO_H2-59zX64B4DqV9D6F5Q7hQ"


# --- C√ÅC H√ÄM H·ªñ TR·ª¢ ---
def get_sheet_data(sheet_name):
    try:
        gc = st.session_state.get('gc')
        if gc is None:
            st.warning("‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi Google Sheets. Vui l√≤ng th·ª≠ l·∫°i sau.")
            return None
        
        sh = gc.open_by_key(SHEET_ID)
        worksheet = sh.worksheet(sheet_name)
        data = worksheet.get_all_values()
        return data
    except gspread.exceptions.WorksheetNotFound:
        st.error(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y sheet c√≥ t√™n '{sheet_name}'.")
        return None
    except Exception as e:
        st.error(f"‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ sheet '{sheet_name}'. Chi ti·∫øt: {e}")
        return None

def find_column_name(df, possible_names):
    for name in possible_names:
        if name in df.columns:
            return name
    return None

def clean_text(text):
    if text is None:
        return ""
    text = re.sub(r'[\s\W_]+', ' ', text)  # Lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát v√† d·∫•u g·∫°ch d∆∞·ªõi
    return text.strip().lower()

def get_most_similar_question(user_question, qa_data):
    user_q = clean_text(user_question)
    
    questions = [clean_text(item['C√¢u h·ªèi']) for item in qa_data]
    
    if not questions:
        return None
        
    best_match = get_close_matches(user_q, questions, n=1, cutoff=0.6)
    
    if best_match:
        index = questions.index(best_match[0])
        return qa_data[index]
    
    return None

def extract_text_from_image(image_path):
    reader = easyocr.Reader(['vi'])
    result = reader.readtext(image_path, detail=0)
    text = " ".join(result)
    return text

def normalize_text(text):
    # Chuy·ªÉn ƒë·ªïi th√†nh ch·ªØ th∆∞·ªùng v√† lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát ƒë·ªÉ so s√°nh ch√≠nh x√°c h∆°n
    # D√πng regex ƒë·ªÉ lo·∫°i b·ªè d·∫•u
    text = text.lower()
    text = re.sub(r'[√†√°·∫°·∫£√£]', 'a', text)
    text = re.sub(r'[√®√©·∫π·∫ª·∫Ω]', 'e', text)
    text = re.sub(r'[√¨√≠·ªã·ªâƒ©]', 'i', text)
    text = re.sub(r'[√≤√≥·ªç·ªè√µ]', 'o', text)
    text = re.sub(r'[√π√∫·ª•·ªß≈©]', 'u', text)
    text = re.sub(r'[·ª≥√Ω·ªµ·ª∑·ªπ]', 'y', text)
    text = re.sub(r'[ƒë]', 'd', text)
    text = re.sub(r'[^a-z0-9\s]', '', text)
    return text

def display_full_answer(qa_item):
    st.markdown(f"**C√¢u h·ªèi:** {qa_item['C√¢u h·ªèi']}")
    st.markdown("---")
    st.markdown(f"**N·ªôi dung chi ti·∫øt:**\n{qa_item['C√¢u tr·∫£ l·ªùi']}")
    
    # Hi·ªÉn th·ªã c√°c c√¢u h·ªèi t∆∞∆°ng t·ª± n·∫øu c√≥
    if 'SimilarQuestions' in qa_item and qa_item['SimilarQuestions']:
        with st.expander("C√°c c√¢u h·ªèi t∆∞∆°ng t·ª±"):
            for q in qa_item['SimilarQuestions']:
                st.write(f"- {q}")

# --- X·ª¨ L√ù CH√çNH TRONG APP ---
st.title("ü§ñ H·ªÜ TH·ªêNG TR·ª¢ L√ù ·∫¢O N·ªòI B·ªò")

# Kh·ªüi t·∫°o session state
if "qa_results" not in st.session_state:
    st.session_state.qa_results = []
if "current_qa_display" not in st.session_state:
    st.session_state.current_qa_display = 0
if "user_input_value" not in st.session_state:
    st.session_state.user_input_value = ""

# Load data Question-Answer
qa_sheet_data = get_sheet_data("QA")
if qa_sheet_data:
    st.session_state.qa_data = [
        {'C√¢u h·ªèi': row[0], 'C√¢u tr·∫£ l·ªùi': row[1]} for row in qa_sheet_data[1:]
    ]

# Giao di·ªán nh·∫≠p li·ªáu
st.markdown("### üí¨ Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n")
user_input = st.text_area(
    "G√µ c√¢u h·ªèi v√†o ƒë√¢y...",
    key="user_input_key",
    value=st.session_state.user_input_value,
    placeholder="V√≠ d·ª•: L·∫•y th√¥ng tin KPI c·ªßa c√°c ƒë∆°n v·ªã th√°ng 6 nƒÉm 2025 v√† s·∫Øp x·∫øp theo th·ª© t·ª± gi·∫£m d·∫ßn"
)

col1, col2 = st.columns([1, 1])

with col1:
    if st.button("G·ª≠i c√¢u h·ªèi", use_container_width=True, type="primary"):
        st.session_state.user_input_value = user_input
        st.session_state.qa_results = []
        if user_input:
            # X·ª≠ l√Ω c√°c c√¢u h·ªèi ƒë·∫∑c bi·ªát c√≥ ƒë·ªì th·ªã
            normalized_user_msg = normalize_text(user_input)
            is_handled = False
            
            # --- ƒêO·∫†N M√É X·ª¨ L√ù C√ÇU H·ªéI V√Ä T·∫†O BI·ªÇU ƒê·ªí ---
            # C√¢u h·ªèi: L·∫•y th√¥ng tin KPI c·ªßa c√°c ƒë∆°n v·ªã th√°ng 6 nƒÉm 2025 v√† s·∫Øp x·∫øp theo th·ª© t·ª± gi·∫£m d·∫ßn
            if "l·∫•y th√¥ng tin kpi c·ªßa c√°c ƒë∆°n v·ªã th√°ng 6 nƒÉm 2025 v√† s·∫Øp x·∫øp theo th·ª© t·ª± gi·∫£m d·∫ßn" in normalized_user_msg:
                sheet_name = "KPI"
                sheet_data = get_sheet_data(sheet_name)
                if sheet_data:
                    df = pd.DataFrame(sheet_data)
                    kpi_col = find_column_name(df, ['ƒêi·ªÉm KPI', 'KPI'])
                    nam_col = find_column_name(df, ['NƒÉm'])
                    thang_col = find_column_name(df, ['Th√°ng'])
                    donvi_col = find_column_name(df, ['ƒê∆°n v·ªã'])

                    if kpi_col and nam_col and thang_col and donvi_col:
                        # Chuy·ªÉn ƒë·ªïi c·ªôt KPI, NƒÉm, Th√°ng sang d·∫°ng s·ªë, thay th·∫ø l·ªói b·∫±ng NaN
                        df[kpi_col] = pd.to_numeric(df[kpi_col], errors='coerce')
                        df[nam_col] = pd.to_numeric(df[nam_col], errors='coerce')
                        df[thang_col] = pd.to_numeric(df[thang_col], errors='coerce')
                        
                        # ƒêi·ªÅn gi√° tr·ªã NaN b·∫±ng 0 ƒë·ªÉ c√≥ th·ªÉ hi·ªÉn th·ªã tr√™n bi·ªÉu ƒë·ªì
                        df[kpi_col].fillna(0, inplace=True)

                        # L·ªçc d·ªØ li·ªáu
                        df_filtered = df[(df[nam_col] == 2025) & (df[thang_col] == 6)]
                        
                        # S·∫Øp x·∫øp theo th·ª© t·ª± gi·∫£m d·∫ßn
                        df_sorted = df_filtered.sort_values(by=kpi_col, ascending=False)
                        df_sorted = df_sorted[[donvi_col, kpi_col]].reset_index(drop=True)
                        
                        st.subheader("B·∫£ng ƒëi·ªÉm KPI c·ªßa c√°c ƒë∆°n v·ªã th√°ng 6 nƒÉm 2025")
                        st.dataframe(df_sorted)

                        # V·∫Ω bi·ªÉu ƒë·ªì
                        plt.figure(figsize=(12, 6))
                        sns.barplot(x=df_sorted[donvi_col], y=df_sorted[kpi_col], palette="viridis")
                        plt.title("Bi·ªÉu ƒë·ªì KPI th√°ng 6 nƒÉm 2025 theo ƒë∆°n v·ªã")
                        plt.xlabel("ƒê∆°n v·ªã")
                        plt.ylabel("ƒêi·ªÉm KPI")
                        plt.xticks(rotation=45, ha='right')
                        plt.tight_layout()
                        st.pyplot(plt)
                    else:
                        st.warning("‚ùó Kh√¥ng t√¨m th·∫•y c√°c c·ªôt c·∫ßn thi·∫øt ('NƒÉm', 'Th√°ng', 'ƒê∆°n v·ªã', 'ƒêi·ªÉm KPI') trong sheet KPI.")
                else:
                    st.warning("‚ùó Sheet 'KPI' kh√¥ng c√≥ d·ªØ li·ªáu ho·∫∑c kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c.")
                is_handled = True
            
            # --- X·ª¨ L√ù S·ª∞ C·ªê THEO LO·∫†I S·ª∞ C·ªê ---
            if "l·∫•y th√¥ng tin s·ª± c·ªë nƒÉm 2025 so s√°nh v·ªõi c√πng k·ª≥" in normalized_user_msg and "lo·∫°i s·ª± c·ªë" in normalized_user_msg:
                sheet_name = "Qu·∫£n l√Ω s·ª± c·ªë"
                sheet_data = get_sheet_data(sheet_name)
                if sheet_data:
                    df = pd.DataFrame(sheet_data)
                    nam_col = find_column_name(df, ['NƒÉm'])
                    thang_col = find_column_name(df, ['Th√°ng'])
                    loai_col = find_column_name(df, ['Lo·∫°i s·ª± c·ªë'])  # c·ªôt E

                    if nam_col and thang_col and loai_col:
                        df[nam_col] = pd.to_numeric(df[nam_col], errors='coerce')
                        df[thang_col] = pd.to_numeric(df[thang_col], errors='coerce')

                        df_filtered = df[df[nam_col].isin([2024, 2025])]
                        df_grouped = df_filtered.groupby([nam_col, loai_col]).size().reset_index(name='S·ªë s·ª± c·ªë')

                        st.subheader("üìä So s√°nh s·ªë s·ª± c·ªë theo lo·∫°i s·ª± c·ªë (nƒÉm 2025 v√† c√πng k·ª≥ 2024)")
                        st.dataframe(df_grouped)

                        plt.figure(figsize=(12, 6))
                        sns.barplot(data=df_grouped, x='S·ªë s·ª± c·ªë', y=loai_col, hue=nam_col, palette='viridis', orient='h')
                        plt.title('S·ªë s·ª± c·ªë theo lo·∫°i s·ª± c·ªë (2025 v√† c√πng k·ª≥ 2024)')
                        plt.xlabel('S·ªë l∆∞·ª£ng s·ª± c·ªë')
                        plt.ylabel('Lo·∫°i s·ª± c·ªë')
                        plt.tight_layout()
                        st.pyplot(plt)
                    else:
                        st.warning("‚ùó Kh√¥ng t√¨m th·∫•y c√°c c·ªôt c·∫ßn thi·∫øt ('NƒÉm', 'Th√°ng', 'Lo·∫°i s·ª± c·ªë') trong sheet Qu·∫£n l√Ω s·ª± c·ªë.")
                else:
                    st.warning("‚ùó Sheet 'Qu·∫£n l√Ω s·ª± c·ªë' kh√¥ng c√≥ d·ªØ li·ªáu ho·∫∑c kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c.")
                is_handled = True

            # --- CBCNV: Bi·ªÉu ƒë·ªì theo tr√¨nh ƒë·ªô chuy√™n m√¥n ---
            if "cbcnv" in normalized_user_msg and "tr√¨nh ƒë·ªô chuy√™n m√¥n" in normalized_user_msg:
                sheet_name = "CBCNV"
                sheet_data = get_sheet_data(sheet_name)
                if sheet_data:
                    df = pd.DataFrame(sheet_data)
                    trinhdo_col = find_column_name(df, ['Tr√¨nh ƒë·ªô chuy√™n m√¥n', 'Tr√¨nh ƒë·ªô', 'Trinh do'])

                    if trinhdo_col:
                        df_grouped = df[trinhdo_col].value_counts().reset_index()
                        df_grouped.columns = ['Tr√¨nh ƒë·ªô chuy√™n m√¥n', 'S·ªë l∆∞·ª£ng']
                        
                        st.subheader("üìä Ph√¢n b·ªë CBCNV theo tr√¨nh ƒë·ªô chuy√™n m√¥n")
                        st.dataframe(df_grouped)
                        
                        # Bi·ªÉu ƒë·ªì c·ªôt
                        plt.figure(figsize=(12, 6))
                        sns.barplot(data=df_grouped, x='S·ªë l∆∞·ª£ng', y='Tr√¨nh ƒë·ªô chuy√™n m√¥n', palette='crest', orient='h')
                        plt.title("Ph√¢n b·ªë CBCNV theo tr√¨nh ƒë·ªô chuy√™n m√¥n")
                        plt.xlabel("S·ªë l∆∞·ª£ng")
                        plt.ylabel("Tr√¨nh ƒë·ªô chuy√™n m√¥n")
                        st.pyplot(plt)
                        
                        # Bi·ªÉu ƒë·ªì h√¨nh tr√≤n
                        plt.figure(figsize=(8, 8))
                        plt.pie(
                            df_grouped['S·ªë l∆∞·ª£ng'], 
                            labels=df_grouped['Tr√¨nh ƒë·ªô chuy√™n m√¥n'], 
                            autopct='%1.1f%%', 
                            startangle=140, 
                            colors=sns.color_palette("Set2")
                        )
                        plt.title("T·ª∑ l·ªá CBCNV theo tr√¨nh ƒë·ªô chuy√™n m√¥n")
                        plt.tight_layout()
                        st.pyplot(plt)
                    else:
                        st.warning("‚ùó Kh√¥ng t√¨m th·∫•y c·ªôt 'Tr√¨nh ƒë·ªô chuy√™n m√¥n' trong sheet CBCNV")
                else:
                    st.warning("‚ùó Sheet 'CBCNV' kh√¥ng c√≥ d·ªØ li·ªáu ho·∫∑c kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c.")
                is_handled = True

            # --- CBCNV: Bi·ªÉu ƒë·ªì theo ƒë·ªô tu·ªïi ---
            if "cbcnv" in normalized_user_msg and "ƒë·ªô tu·ªïi" in normalized_user_msg:
                sheet_name = "CBCNV"
                sheet_data = get_sheet_data(sheet_name)
                if sheet_data:
                    df = pd.DataFrame(sheet_data)
                    tuoi_col = find_column_name(df, ['ƒê·ªô tu·ªïi', 'Tu·ªïi', 'Q'])

                    if tuoi_col:
                        df[tuoi_col] = pd.to_numeric(df[tuoi_col], errors='coerce')
                        bins = [0, 30, 40, 50, 100]
                        labels = ['<30', '30-39', '40-49', '‚â•50']
                        df['Nh√≥m tu·ªïi'] = pd.cut(df[tuoi_col], bins=bins, labels=labels, right=False)
                        df_grouped = df['Nh√≥m tu·ªïi'].value_counts().sort_index().reset_index()
                        df_grouped.columns = ['Nh√≥m tu·ªïi', 'S·ªë l∆∞·ª£ng']

                        st.subheader("üìä Ph√¢n b·ªë CBCNV theo ƒë·ªô tu·ªïi")
                        st.dataframe(df_grouped)

                        # Bi·ªÉu ƒë·ªì c·ªôt
                        plt.figure(figsize=(8, 5))
                        ax = sns.barplot(data=df_grouped, x='Nh√≥m tu·ªïi', y='S·ªë l∆∞·ª£ng', palette='flare')
                        plt.title("Ph√¢n b·ªë CBCNV theo ƒë·ªô tu·ªïi")
                        for p in ax.patches:
                            ax.annotate(f'{int(p.get_height())}', (p.get_x() + p.get_width() / 2., p.get_height()),
                                        ha='center', va='center', fontsize=12, color='black', xytext=(0, 5),
                                        textcoords='offset points')
                        st.pyplot(plt)
                        
                        # Bi·ªÉu ƒë·ªì h√¨nh tr√≤n
                        plt.figure(figsize=(8, 8))
                        plt.pie(
                            df_grouped['S·ªë l∆∞·ª£ng'],
                            labels=df_grouped['Nh√≥m tu·ªïi'],
                            autopct='%1.1f%%',
                            startangle=140,
                            colors=sns.color_palette("Set3")
                        )
                        plt.title("T·ª∑ l·ªá CBCNV theo ƒë·ªô tu·ªïi")
                        plt.tight_layout()
                        st.pyplot(plt)
                    else:
                        st.warning("‚ùó Kh√¥ng t√¨m th·∫•y c·ªôt 'ƒê·ªô tu·ªïi' trong sheet CBCNV")
                else:
                    st.warning("‚ùó Sheet 'CBCNV' kh√¥ng c√≥ d·ªØ li·ªáu ho·∫∑c kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c.")
                is_handled = True

            # N·∫øu kh√¥ng ph·∫£i c√¢u h·ªèi c√≥ bi·ªÉu ƒë·ªì, x·ª≠ l√Ω b·∫±ng QA
            if not is_handled:
                qa_item = get_most_similar_question(user_input, st.session_state.qa_data)
                
                if qa_item:
                    st.session_state.qa_results = [qa_item]
                    st.session_state.current_qa_display = 0
                else:
                    st.warning("‚ùó T√¥i kh√¥ng t√¨m th·∫•y c√¢u tr·∫£ l·ªùi tr·ª±c ti·∫øp cho c√¢u h·ªèi c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i v·ªõi m·ªôt c√¢u h·ªèi kh√°c.")
                    st.session_state.qa_results = []
                    st.session_state.current_qa_display = 0
        else:
            st.warning("‚ùó Vui l√≤ng nh·∫≠p c√¢u h·ªèi.")

# Hi·ªÉn th·ªã k·∫øt qu·∫£ QA
if st.session_state.qa_results:
    st.subheader("üîî K·∫øt qu·∫£ t√¨m ki·∫øm")
    display_full_answer(st.session_state.qa_results[st.session_state.current_qa_display])
    
    if len(st.session_state.qa_results) and len(st.session_state.qa_results) > 1:
        st.info("ƒê√£ hi·ªÉn th·ªã t·∫•t c·∫£ c√°c c√¢u tr·∫£ l·ªùi t∆∞∆°ng t·ª±.")


def extract_text_from_image(image_path):
    reader = easyocr.Reader(['vi'])
    result = reader.readtext(image_path, detail=0)
    text = " ".join(result)
    return text

st.markdown("### üì∏ Ho·∫∑c t·∫£i ·∫£nh ch·ª©a c√¢u h·ªèi (n·∫øu c√≥)")
uploaded_image = st.file_uploader("T·∫£i ·∫£nh c√¢u h·ªèi", type=["jpg", "png", "jpeg"])

if uploaded_image is not None:
    temp_image_path = Path("temp_uploaded_image.jpg")
    try:
        with open(temp_image_path, "wb") as f:
            f.write(uploaded_image.getbuffer())
        
        with st.spinner("‚è≥ ƒêang x·ª≠ l√Ω ·∫£nh v√† tr√≠ch xu·∫•t vƒÉn b·∫£n..."):
            extracted_text = extract_text_from_image(str(temp_image_path))
        
        if extracted_text:
            st.info("VƒÉn b·∫£n ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ ·∫£nh:")
            st.code(extracted_text, language="text")
            st.session_state.user_input_value = extracted_text
            st.success("‚úÖ ƒê√£ ƒëi·ªÅn vƒÉn b·∫£n v√†o √¥ nh·∫≠p li·ªáu. B·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a v√† nh·∫•n 'G·ª≠i'.")
            st.rerun()
        else:
            st.warning("‚ö†Ô∏è Kh√¥ng th·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i v·ªõi ·∫£nh kh√°c r√µ h∆°n.")
    finally:
        if temp_image_path.exists():
            os.remove(temp_image_path)
