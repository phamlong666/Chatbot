import streamlit as st
import gspread
from google.oauth2.service_account import Credentials
from openai import OpenAI
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.cm as cm # Th√™m th∆∞ vi·ªán cm ƒë·ªÉ t·∫°o m√†u s·∫Øc
import re # Th√™m th∆∞ th∆∞ vi·ªán regex ƒë·ªÉ tr√≠ch xu·∫•t t√™n sheet
import os # Th√™m th∆∞ vi·ªán os ƒë·ªÉ ki·ªÉm tra ƒë∆∞·ªùng d·∫´n t·ªáp

# C·∫•u h√¨nh Matplotlib ƒë·ªÉ hi·ªÉn th·ªã ti·∫øng Vi·ªát
plt.rcParams['font.family'] = 'DejaVu Sans' # Ho·∫∑c 'Arial', 'Times New Roman' n·∫øu c√≥
plt.rcParams['font.size'] = 10
plt.rcParams['axes.labelsize'] = 12
plt.rcParams['axes.titlesize'] = 14
plt.rcParams['xtick.labelsize'] = 10
plt.rcParams['ytick.labelsize'] = 10
plt.rcParams['figure.titlesize'] = 16

# K·∫øt n·ªëi Google Sheets
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]

if "google_service_account" in st.secrets:
    info = st.secrets["google_service_account"]
    creds = Credentials.from_service_account_info(info, scopes=SCOPES)
    client = gspread.authorize(creds)
else:
    st.error("‚ùå Kh√¥ng t√¨m th·∫•y google_service_account trong secrets. Vui l√≤ng c·∫•u h√¨nh.")
    st.stop() # D·ª´ng ·ª©ng d·ª•ng n·∫øu kh√¥ng c√≥ secrets

# L·∫•y API key OpenAI t·ª´ secrets
openai_api_key = st.secrets.get("OPENAI_API_KEY")

client_ai = None
if openai_api_key:
    client_ai = OpenAI(api_key=openai_api_key)
else:
    st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y API key OpenAI trong secrets. M·ªôt s·ªë ch·ª©c nƒÉng c√≥ th·ªÉ b·ªã h·∫°n ch·∫ø.")

# --- C·∫•u h√¨nh giao di·ªán Streamlit ---
st.set_page_config(layout="wide")

# Sidebar
with st.sidebar:
    # S·ª≠a l·ªói t·∫£i logo v√† gi·∫£m k√≠ch th∆∞·ªõc 50%
    logo_path = "logo_hinh_tron.jpg"
    if os.path.exists(logo_path):
        try:
            with open(logo_path, "rb") as f:
                logo_bytes = f.read()
            st.image(logo_bytes, caption="Logo ƒê·ªôi QLƒêLKV ƒê·ªãnh H√≥a", width=75) # Gi·∫£m width t·ª´ 150 xu·ªëng 75
        except Exception as e:
            st.error(f"‚ùå L·ªói khi ƒë·ªçc t·ªáp logo: {e}")
    else:
        st.warning(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y t·ªáp logo t·∫°i ƒë∆∞·ªùng d·∫´n: {logo_path}")

    st.title("ü§ñ Chatbot ƒê·ªôi QLƒêLKV ƒê·ªãnh H√≥a")
    st.write("Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi tr·ª£ l√Ω ·∫£o c·ªßa ch√∫ng t√¥i!")
    st.write("B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ c√°c v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t, nghi·ªáp v·ª•, nh√¢n s·ª±, ho·∫∑c c√°c c√¢u h·ªèi chung.")

# H√†m l·∫•y d·ªØ li·ªáu t·ª´ Google Sheet
@st.cache_data(ttl=3600) # Cache d·ªØ li·ªáu trong 1 gi·ªù
def get_sheet_data(sheet_name):
    try:
        spreadsheet = client.open("Data_DienLuc") # T√™n b·∫£ng t√≠nh c·ªßa b·∫°n
        sheet = spreadsheet.worksheet(sheet_name)
        data = sheet.get_all_records()
        return pd.DataFrame(data)
    except Exception as e:
        st.error(f"‚ùå L·ªói khi truy c·∫≠p sheet '{sheet_name}': {e}")
        return pd.DataFrame()

# H√†m x·ª≠ l√Ω c√¢u h·ªèi v·ªÅ nh√¢n s·ª±
def handle_personnel_query(user_msg, df_cbcnv):
    # Tr√≠ch xu·∫•t t√™n b·ªô ph·∫≠n ho·∫∑c t·ª´ kh√≥a t√¨m ki·∫øm t·ª´ tin nh·∫Øn ng∆∞·ªùi d√πng
    # V√≠ d·ª•: "nh√¢n s·ª± t·ªï c√¥ng t√°c", "s·ªë l∆∞·ª£ng ng∆∞·ªùi ph√≤ng k·∫ø ho·∫°ch"
    # C·∫£i thi·ªán regex ƒë·ªÉ b·∫Øt c√°c t·ª´ kh√≥a nh∆∞ "t·ªï", "ph√≤ng", "ƒë·ªôi", "ban" ƒëi k√®m v·ªõi t√™n
    match = re.search(r'(nh√¢n s·ª±|s·ªë l∆∞·ª£ng ng∆∞·ªùi|th√¥ng tin ng∆∞·ªùi|ai l√†).*(t·ªï|ph√≤ng|ƒë·ªôi|ban|b·ªô ph·∫≠n)\s*([a-zA-Z0-9\s_√Ä√Å√Ç√É√à√â√ä√å√ç√í√ì√î√ï√ô√ö≈®∆Ø·∫†·∫¢·∫§·∫¶·∫®·∫™·∫¨·∫Æ·∫∞·∫≤·∫¥·∫∂·∫∏·∫∫·∫º·ªÄ·∫æ·ªÇ·ªÑ·ªÜ·ªà·ªä·ªå·ªé·ªê·ªí·ªî·ªñ·ªò·ªö·ªú·ªû·ª†·ª¢·ª§·ª¶·ª®·ª™·ª∞·ª≤·ª¥√ù·ª∂·ª∏ƒêƒë]+)', user_msg, re.IGNORECASE | re.UNICODE)
    department_keyword = None
    if match:
        department_keyword = match.group(3).strip()
        st.write(f"ƒê√£ ph√°t hi·ªán t·ª´ kh√≥a b·ªô ph·∫≠n/t·ªï/ban: **{department_keyword}**")
    else:
        # Th·ª≠ t√¨m c√°c t·ª´ kh√≥a chung h∆°n n·∫øu kh√¥ng t√¨m th·∫•y b·ªô ph·∫≠n c·ª• th·ªÉ
        general_keywords = ["nh√¢n s·ª±", "ng∆∞·ªùi", "s·ªë l∆∞·ª£ng", "th√¥ng tin"]
        if any(kw in user_msg.lower() for kw in general_keywords):
            st.write("ƒê√£ ph√°t hi·ªán c√¢u h·ªèi v·ªÅ nh√¢n s·ª± chung.")

    if df_cbcnv.empty:
        st.warning("‚ö†Ô∏è D·ªØ li·ªáu CBCNV kh√¥ng kh·∫£ d·ª•ng.")
        return

    if department_keyword:
        # L·ªçc theo b·ªô ph·∫≠n c√¥ng t√°c, t√¨m ki·∫øm m·ªôt ph·∫ßn t√™n
        filtered_df = df_cbcnv[df_cbcnv['B·ªô ph·∫≠n c√¥ng t√°c'].str.contains(department_keyword, case=False, na=False)]
        if not filtered_df.empty:
            st.subheader(f"Th√¥ng tin nh√¢n s·ª± cho b·ªô ph·∫≠n/t·ªï/ban: {department_keyword}")
            st.dataframe(filtered_df)
            st.write(f"T·ªïng s·ªë nh√¢n s·ª±: **{len(filtered_df)}**")

            # V·∫Ω bi·ªÉu ƒë·ªì n·∫øu c√≥ d·ªØ li·ªáu
            if 'B·ªô ph·∫≠n c√¥ng t√°c' in df_cbcnv.columns:
                department_counts = filtered_df['B·ªô ph·∫≠n c√¥ng t√°c'].value_counts()
                if not department_counts.empty:
                    fig, ax = plt.subplots(figsize=(10, 6))
                    department_counts.plot(kind='bar', ax=ax, color=cm.viridis(department_counts.index.factorize()[0]/len(department_counts)))
                    ax.set_title(f'Bi·ªÉu ƒë·ªì ph√¢n b·ªï nh√¢n s·ª± theo b·ªô ph·∫≠n cho "{department_keyword}"')
                    ax.set_xlabel('B·ªô ph·∫≠n c√¥ng t√°c')
                    ax.set_ylabel('S·ªë l∆∞·ª£ng nh√¢n s·ª±')
                    plt.xticks(rotation=45, ha='right')
                    plt.tight_layout()
                    st.pyplot(fig, dpi=400) # TƒÉng DPI ƒë·ªÉ bi·ªÉu ƒë·ªì n√©t h∆°n
                else:
                    st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·ªôt 'B·ªô ph·∫≠n c√¥ng t√°c' ho·∫∑c d·ªØ li·ªáu r·ªóng ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì nh√¢n s·ª±.")
            else:
                st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng ki·ªÉm tra t√™n b·ªô ph·∫≠n ho·∫∑c t·ª´ kh√≥a.")
        else:
            st.warning(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y nh√¢n s·ª± n√†o thu·ªôc b·ªô ph·∫≠n/t·ªï/ban c√≥ t·ª´ kh√≥a: **{department_keyword}**.")
    else:
        st.subheader("T·ªïng quan nh√¢n s·ª± ƒê·ªôi QLƒêLKV ƒê·ªãnh H√≥a")
        st.dataframe(df_cbcnv)
        st.write(f"T·ªïng s·ªë nh√¢n s·ª± to√†n ƒë·ªôi: **{len(df_cbcnv)}**")

        # V·∫Ω bi·ªÉu ƒë·ªì t·ªïng quan
        if 'B·ªô ph·∫≠n c√¥ng t√°c' in df_cbcnv.columns:
            department_counts = df_cbcnv['B·ªô ph·∫≠n c√¥ng t√°c'].value_counts()
            if not department_counts.empty:
                fig, ax = plt.subplots(figsize=(12, 7))
                # S·ª≠ d·ª•ng colormap ƒë·ªÉ t·∫°o m√†u s·∫Øc kh√°c nhau cho m·ªói c·ªôt
                colors = cm.viridis(department_counts.index.factorize()[0] / len(department_counts))
                department_counts.plot(kind='bar', ax=ax, color=colors)
                ax.set_title('Bi·ªÉu ƒë·ªì ph√¢n b·ªï nh√¢n s·ª± theo b·ªô ph·∫≠n')
                ax.set_xlabel('B·ªô ph·∫≠n c√¥ng t√°c')
                ax.set_ylabel('S·ªë l∆∞·ª£ng nh√¢n s·ª±')
                plt.xticks(rotation=45, ha='right')
                plt.tight_layout()
                st.pyplot(fig, dpi=400) # TƒÉng DPI ƒë·ªÉ bi·ªÉu ƒë·ªì n√©t h∆°n
            else:
                st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·ªôt 'B·ªô ph·∫≠n c√¥ng t√°c' ho·∫∑c d·ªØ li·ªáu r·ªóng ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì nh√¢n s·ª±.")


# --- Main chat interface ---
st.title("üí¨ Tr√≤ chuy·ªán v·ªõi Tr·ª£ l√Ω ·∫£o")

# Kh·ªüi t·∫°o l·ªãch s·ª≠ tr√≤ chuy·ªán
if "messages" not in st.session_state:
    st.session_state.messages = []

# Hi·ªÉn th·ªã l·ªãch s·ª≠ tr√≤ chuy·ªán
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# X·ª≠ l√Ω input t·ª´ ng∆∞·ªùi d√πng
user_msg = st.chat_input("B·∫°n mu·ªën h·ªèi g√¨?")
if user_msg:
    # Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
    st.session_state.messages.append({"role": "user", "content": user_msg})
    with st.chat_message("user"):
        st.markdown(user_msg)

    with st.chat_message("assistant"):
        # Ki·ªÉm tra n·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn nh√¢n s·ª±
        if any(keyword in user_msg.lower() for keyword in ["nh√¢n s·ª±", "ng∆∞·ªùi", "s·ªë l∆∞·ª£ng", "t·ªï", "ph√≤ng", "ban", "b·ªô ph·∫≠n", "ai l√†"]):
            df_cbcnv = get_sheet_data("CBCNV") # T√™n sheet ch·ª©a d·ªØ li·ªáu CBCNV
            if not df_cbcnv.empty:
                handle_personnel_query(user_msg, df_cbcnv)
            else:
                st.warning("‚ö†Ô∏è Kh√¥ng th·ªÉ truy xu·∫•t d·ªØ li·ªáu t·ª´ sheet CBCNV.")

        # X·ª≠ l√Ω c√°c c√¢u h·ªèi chung b·∫±ng OpenAI
        else:
            if client_ai:
                try:
                    response = client_ai.chat.completions.create(
                        # model="gpt-4o", # Ki·ªÉm tra l·∫°i quy·ªÅn truy c·∫≠p m√¥ h√¨nh n√†y
                        model="gpt-3.5-turbo", # Th·ª≠ v·ªõi gpt-3.5-turbo n·∫øu gpt-4o kh√¥ng ho·∫°t ƒë·ªông
                        messages=[
                            {"role": "system", "content": "B·∫°n l√† tr·ª£ l√Ω ·∫£o c·ªßa ƒê·ªôi QLƒêLKV ƒê·ªãnh H√≥a, chuy√™n h·ªó tr·ª£ tr·∫£ l·ªùi c√°c c√¢u h·ªèi k·ªπ thu·∫≠t, nghi·ªáp v·ª•, ƒëo√†n th·ªÉ v√† c·ªông ƒë·ªìng li√™n quan ƒë·∫øn ng√†nh ƒëi·ªán. Lu√¥n cung c·∫•p th√¥ng tin ch√≠nh x√°c v√† h·ªØu √≠ch."},
                            {"role": "user", "content": user_msg}
                        ]
                    )
                    st.write(response.choices[0].message.content)
                except Exception as e:
                    st.error(f"‚ùå L·ªói khi g·ªçi OpenAI: {e}. Vui l√≤ng ki·ªÉm tra API key ho·∫∑c quy·ªÅn truy c·∫≠p m√¥ h√¨nh.")
            else:
                st.warning("‚ö†Ô∏è Kh√¥ng c√≥ API key OpenAI. Vui l√≤ng th√™m v√†o st.secrets ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y.")

